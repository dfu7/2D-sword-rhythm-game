//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""f2b7551c-c41f-43a6-b430-0cffae9e97c4"",
            ""actions"": [
                {
                    ""name"": ""LeftSwing"",
                    ""type"": ""Value"",
                    ""id"": ""cef3af05-86c1-409b-9231-5b314292c12e"",
                    ""expectedControlType"": ""Key"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightSwing"",
                    ""type"": ""Button"",
                    ""id"": ""d2969776-990b-46f2-a31c-4f9d5a8199fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""52336e61-4f8b-4e3d-8446-f3006852f35f"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftSwing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abd93593-1c8b-4572-925e-2916ea104f15"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightSwing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_LeftSwing = m_Default.FindAction("LeftSwing", throwIfNotFound: true);
        m_Default_RightSwing = m_Default.FindAction("RightSwing", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_LeftSwing;
    private readonly InputAction m_Default_RightSwing;
    public struct DefaultActions
    {
        private @Controls m_Wrapper;
        public DefaultActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftSwing => m_Wrapper.m_Default_LeftSwing;
        public InputAction @RightSwing => m_Wrapper.m_Default_RightSwing;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @LeftSwing.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftSwing;
                @LeftSwing.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftSwing;
                @LeftSwing.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftSwing;
                @RightSwing.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightSwing;
                @RightSwing.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightSwing;
                @RightSwing.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightSwing;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftSwing.started += instance.OnLeftSwing;
                @LeftSwing.performed += instance.OnLeftSwing;
                @LeftSwing.canceled += instance.OnLeftSwing;
                @RightSwing.started += instance.OnRightSwing;
                @RightSwing.performed += instance.OnRightSwing;
                @RightSwing.canceled += instance.OnRightSwing;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    public interface IDefaultActions
    {
        void OnLeftSwing(InputAction.CallbackContext context);
        void OnRightSwing(InputAction.CallbackContext context);
    }
}
